rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // USERS and nested subcollections
    match /users/{userId} {
      // Basic profile
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      
      // Followers (people who follow userId)
      match /followers/{followerUid} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && ( request.auth.uid == followerUid || request.auth.uid == userId );
      }
      
      // Following (people userId follows)
      match /following/{followingUid} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && ( request.auth.uid == followingUid || request.auth.uid == userId );
      }
      
      // Bookmarks (posts saved by userId)
      match /bookmarks/{postId} {
        allow read, create, delete: if request.auth != null && request.auth.uid == userId;
        allow update: if false; // Bookmarks should not be updated, only created/deleted
      }
      
      // Notifications inbox
      match /notifications/{notifId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Allow creating notifications for various types
        allow create: if request.auth != null
          && request.resource.data.type in ['follow', 'comment', 'like', 'reply']
          && request.resource.data.read == false
          && request.resource.data.createdAt is timestamp
          && request.resource.data.fromUid is string;
        // Allow owner to flip 'read' true/false even if other fields are present
        allow update: if request.auth != null && request.auth.uid == userId && request.resource.data.read is bool && resource.data.read != request.resource.data.read;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // POSTS
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.authorUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.authorUid == request.auth.uid;
      
      // Media stored in Firestore (as in your current implementation)
      match /media/{mediaId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/posts/$(postId)).data.authorUid == request.auth.uid;
      }
      
      // Comments (including replies)
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && request.resource.data.authorUid == request.auth.uid 
          && request.resource.data.createdAt is timestamp
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0;
        // Comment author OR post author can update/delete
        allow update, delete: if request.auth != null && ( resource.data.authorUid == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.authorUid == request.auth.uid );
      }
      
      // Likes
      match /likes/{likerUid} {
        allow read: if request.auth != null;
        // Liker OR post author (for cleanup) can delete
        allow create, delete: if request.auth != null && ( request.auth.uid == likerUid || get(/databases/$(database)/documents/posts/$(postId)).data.authorUid == request.auth.uid );
      }
    }
    
    // CHATS
    match /chats/{roomId} {
      function participants() {
        return request.auth != null && roomId.matches('^[A-Za-z0-9_]+$') && request.auth.uid in roomId.split('_');
      }
      
      // Either participant can read/create/update/delete the chat doc
      allow read: if participants();
      allow create, update: if participants();
      allow delete: if participants();
      
      match /messages/{msgId} {
        allow read: if participants();
        // Create validations (text/image/post)
        allow create: if participants() && request.resource.data.type in ['text', 'image', 'post'] && request.resource.data.from == request.auth.uid && request.resource.data.createdAt is timestamp && ( 
          // text
          (request.resource.data.type == 'text' && request.resource.data.keys().hasAll(['id','from','to','type','text','createdAt']) && request.resource.data.text is string) ||
          // image stored as base64
          (request.resource.data.type == 'image' && request.resource.data.keys().hasAll(['id','from','to','type','imageBase64','createdAt']) && request.resource.data.imageBase64 is string) ||
          // post share
          (request.resource.data.type == 'post' && request.resource.data.keys().hasAll(['id','from','to','type','postId','text','createdAt']) && request.resource.data.postId is string)
        );
        // Allow either participant to delete any message (needed for full chat deletion)
        allow delete: if participants();
        // No updates to messages
        allow update: if false;
      }
    }
  }
}
